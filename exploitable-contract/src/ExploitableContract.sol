// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import {Pausable} from "./Pausable.sol";
import "forge-std/Console.sol";

contract ExploitableContract is Pausable {
    mapping(address => uint256) public balances;

    function deposit() external payable {
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint256 amount) external whenNotPaused {
        console.logString("here");
        require(balances[msg.sender] >= amount, "Insufficient balance");
        payable(msg.sender).transfer(amount);
        unchecked {
            balances[msg.sender] -= amount;
        }
    }

        mapping(address => bool) public owners;

    constructor(address[] memory _owners) {
        for (uint256 i = 0; i < _owners.length; i++) {
            owners[_owners[i]] = true;
        }
    }

    modifier onlyOwners() {
        require(owners[msg.sender], "Only owners can perform this action");
        _;
    }

    function addOwner(address newOwner) public onlyOwners {
        require(newOwner != address(0), "Invalid address");
        require(!owners[newOwner], "Address is already an owner");
        owners[newOwner] = true;
    }

    function removeOwner(address ownerToRemove) public onlyOwners {
        require(ownerToRemove != address(0), "Invalid address");
        require(owners[ownerToRemove], "Address is not an owner");
        owners[ownerToRemove] = false;
    }
    function pause() external onlyOwners{
        // check permission
        _pause();
    }

    function unpause() external onlyOwners{
        // check permission
        _unpause();
    }
}
