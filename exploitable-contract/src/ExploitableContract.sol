// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import {Pausable} from "./Pausable.sol";
import "forge-std/Console.sol";

contract ExploitableContract is Pausable {
    mapping(address => uint256) public balances;

    function deposit() external payable {
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint256 amount) external whenNotPaused {
        console.logString("here");
        require(balances[msg.sender] >= amount, "Insufficient balance");
        payable(msg.sender).transfer(amount);
        unchecked {
            balances[msg.sender] -= amount;
        }
    }

    function pause() external {
        // check permission
        _pause();
    }

    function unpause() external {
        // check permission
        _unpause();
    }
}
